{"errors": [{"code": 2, "level": "warn", "message": "Timeout when running javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp on includes/simba-tfa/includes/select2.js:\n ", "path": "includes/simba-tfa/includes/select2.js", "rule_id": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running javascript.lang.security.audit.sqli.node-postgres-sqli.node-postgres-sqli on includes/simba-tfa/includes/select2.js:\n ", "path": "includes/simba-tfa/includes/select2.js", "rule_id": "javascript.lang.security.audit.sqli.node-postgres-sqli.node-postgres-sqli", "type": "Timeout"}], "paths": {"scanned": ["admin/general/wp-security-list-table.php", "admin/index.html", "admin/index.php", "admin/wp-security-admin-init.php", "admin/wp-security-admin-menu.php", "admin/wp-security-blacklist-menu.php", "admin/wp-security-brute-force-menu.php", "admin/wp-security-dashboard-menu.php", "admin/wp-security-database-menu.php", "admin/wp-security-filescan-menu.php", "admin/wp-security-filesystem-menu.php", "admin/wp-security-firewall-menu.php", "admin/wp-security-firewall-setup-notice.php", "admin/wp-security-list-404.php", "admin/wp-security-list-acct-activity.php", "admin/wp-security-list-comment-spammer-ip.php", "admin/wp-security-list-debug.php", "admin/wp-security-list-locked-ip.php", "admin/wp-security-list-logged-in-users.php", "admin/wp-security-list-login-fails.php", "admin/wp-security-list-permanent-blocked-ip.php", "admin/wp-security-list-registered-users.php", "admin/wp-security-maintenance-menu.php", "admin/wp-security-misc-options-menu.php", "admin/wp-security-reset-settings.php", "admin/wp-security-settings-menu.php", "admin/wp-security-spam-menu.php", "admin/wp-security-tools-menu.php", "admin/wp-security-user-accounts-menu.php", "admin/wp-security-user-login-menu.php", "admin/wp-security-user-registration-menu.php", "backups/index.html", "classes/aios-ajax.php", "classes/firewall/family/wp-security-firewall-families.php", "classes/firewall/family/wp-security-firewall-family-builder.php", "classes/firewall/family/wp-security-firewall-family-collection.php", "classes/firewall/family/wp-security-firewall-family.php", "classes/firewall/libs/wp-security-firewall-config.php", "classes/firewall/rule/actions/action-exit-trait.php", "classes/firewall/rule/actions/action-forbid-and-exit-trait.php", "classes/firewall/rule/actions/action-forbid-trait.php", "classes/firewall/rule/actions/action-redirect-and-exit-trait.php", "classes/firewall/rule/actions/action-redirect-trait.php", "classes/firewall/rule/rules/6g/rule-block-query-strings-6g.php", "classes/firewall/rule/rules/6g/rule-block-refs-6g.php", "classes/firewall/rule/rules/6g/rule-block-request-strings-6g.php", "classes/firewall/rule/rules/6g/rule-block-user-agents-6g.php", "classes/firewall/rule/rules/6g/rule-request-method-6g.php", "classes/firewall/rule/rules/blacklist/rule-user-agent-blacklist.php", "classes/firewall/rule/rules/bruteforce/rule-cookie-prevent-bruteforce.php", "classes/firewall/rule/wp-security-firewall-rule-builder.php", "classes/firewall/rule/wp-security-firewall-rule-utils.php", "classes/firewall/rule/wp-security-firewall-rule.php", "classes/firewall/wp-security-firewall-loader.php", "classes/firewall/wp-security-firewall.php", "classes/grade-system/wp-security-feature-item-manager.php", "classes/grade-system/wp-security-feature-item.php", "classes/index.html", "classes/index.php", "classes/wp-security-abstract-ids.php", "classes/wp-security-base-tasks.php", "classes/wp-security-block-bootstrap.php", "classes/wp-security-block-file.php", "classes/wp-security-block-htaccess.php", "classes/wp-security-block-litespeed.php", "classes/wp-security-block-muplugin.php", "classes/wp-security-block-userini.php", "classes/wp-security-block-wpconfig.php", "classes/wp-security-blocking.php", "classes/wp-security-bot-protection.php", "classes/wp-security-captcha.php", "classes/wp-security-cleanup.php", "classes/wp-security-comment.php", "classes/wp-security-config.php", "classes/wp-security-configure-settings.php", "classes/wp-security-cronjob-handler.php", "classes/wp-security-deactivation-tasks.php", "classes/wp-security-debug-logger.php", "classes/wp-security-file-scan.php", "classes/wp-security-general-init-tasks.php", "classes/wp-security-installer.php", "classes/wp-security-notices.php", "classes/wp-security-process-renamed-login-page.php", "classes/wp-security-two-factor-login.php", "classes/wp-security-uninstallation-tasks.php", "classes/wp-security-user-login.php", "classes/wp-security-user-registration.php", "classes/wp-security-utility-file.php", "classes/wp-security-utility-firewall.php", "classes/wp-security-utility-htaccess.php", "classes/wp-security-utility-ip-address.php", "classes/wp-security-utility.php", "classes/wp-security-wp-footer-content.php", "classes/wp-security-wp-loaded-tasks.php", "css/index.html", "css/wp-security-admin-styles.css", "css/wp-security-notices.css", "css/wp-security-premium-upgrade.css", "css/wp-security-site-lockout-page.css", "images/arrow.png", "images/error.png", "images/feature-difficulty-badge-bg.png", "images/feature-points-badge-bg.png", "images/form_bg.png", "images/index.html", "images/info-icon.png", "images/loading.gif", "images/notices/black_friday.png", "images/notices/new_year.png", "images/notices/spring.png", "images/notices/summer.png", "images/plugin-icon.png", "images/plugin-icon2.png", "images/plugin-logos/aios-free.png", "images/plugin-logos/aios-premium.png", "images/plugin-logos/aiowps-logo.png", "images/plugin-logos/easy-updates-manager-logo.png", "images/plugin-logos/updraft-central.png", "images/plugin-logos/updraft_logo.png", "images/plugin-logos/updraftplus_logo.png", "images/plugin-logos/wp-optimize.png", "images/plugin-logos/wp_optimize_logo.png", "images/shield-info-icon-36.png", "images/shield-security-icon-36.png", "images/success.png", "images/ud_smile.png", "includes/simba-tfa/includes/frontend-settings.js", "includes/simba-tfa/includes/jquery-qrcode/README.md", "includes/simba-tfa/includes/jquery-qrcode/jquery-qrcode.js", "includes/simba-tfa/includes/jquery.blockUI.js", "includes/simba-tfa/includes/login-form-integrations.php", "includes/simba-tfa/includes/select2.css", "includes/simba-tfa/includes/select2.js", "includes/simba-tfa/includes/tfa.js", "includes/simba-tfa/includes/tfa_admin_icon_16x16.png", "includes/simba-tfa/includes/tfa_admin_icon_32x32.png", "includes/simba-tfa/includes/tfa_frontend.php", "includes/simba-tfa/includes/totp.js", "includes/simba-tfa/includes/users.css", "includes/simba-tfa/providers/totp/Base32/Base32.php", "includes/simba-tfa/providers/totp/hotp-php-master/LICENSE", "includes/simba-tfa/providers/totp/hotp-php-master/README.markdown", "includes/simba-tfa/providers/totp/hotp-php-master/example.php", "includes/simba-tfa/providers/totp/hotp-php-master/hotp.php", "includes/simba-tfa/providers/totp/loader.php", "includes/simba-tfa/simba-tfa.php", "includes/simba-tfa/templates/admin-settings.php", "includes/simba-tfa/templates/settings-intro-notices.php", "includes/simba-tfa/templates/shortcode-tfa-user-settings.php", "includes/simba-tfa/templates/trusted-devices-inner-box.php", "includes/simba-tfa/templates/user-settings.php", "index.html", "js/index.html", "js/password-strength-tool.js", "js/wp-security-admin-script.js", "languages/all-in-one-wp-security-and-firewall-de_DE.mo", "languages/all-in-one-wp-security-and-firewall-de_DE.po", "languages/all-in-one-wp-security-and-firewall-fr_FR.mo", "languages/all-in-one-wp-security-and-firewall-fr_FR.po", "languages/all-in-one-wp-security-and-firewall-hu_HU.mo", "languages/all-in-one-wp-security-and-firewall-hu_HU.po", "languages/all-in-one-wp-security-and-firewall-ko_KR.mo", "languages/all-in-one-wp-security-and-firewall-ko_KR.po", "languages/all-in-one-wp-security-and-firewall-nl_NL.mo", "languages/all-in-one-wp-security-and-firewall-nl_NL.po", "languages/all-in-one-wp-security-and-firewall-pl_PL.mo", "languages/all-in-one-wp-security-and-firewall-pl_PL.po", "languages/all-in-one-wp-security-and-firewall-pt_BR.mo", "languages/all-in-one-wp-security-and-firewall-pt_BR.po", "languages/all-in-one-wp-security-and-firewall-ru_RU.mo", "languages/all-in-one-wp-security-and-firewall-ru_RU.po", "languages/all-in-one-wp-security-and-firewall-sv_SE.mo", "languages/all-in-one-wp-security-and-firewall-sv_SE.po", "languages/all-in-one-wp-security-and-firewall-zh_CN.mo", "languages/all-in-one-wp-security-and-firewall-zh_CN.po", "languages/all-in-one-wp-security-and-firewall.pot", "languages/index.html", "lib/index.html", "license.txt", "logs/index.html", "logs/wp-security-log-cron-job.txt", "logs/wp-security-log.txt", "other-includes/index.html", "other-includes/wp-security-rename-login-feature-pre-5-2.php", "other-includes/wp-security-rename-login-feature-pre-5-7.php", "other-includes/wp-security-rename-login-feature.php", "other-includes/wp-security-stop-users-enumeration.php", "other-includes/wp-security-unlock-request.php", "other-includes/wp-security-visitor-lockout-page.php", "readme.txt", "templates/admin/incompatible-plugin.php", "templates/automated-database-backup.php", "templates/info/ip-address-ip-range-info.php", "templates/may-also-like.php", "templates/menus/settings/advanced-settings.php", "templates/notices/cookie-based-brute-force-prevention-disabled.php", "templates/notices/custom-notice.php", "templates/notices/disable-login-whitelist.php", "templates/notices/horizontal-notice.php", "templates/notices/htaccess-to-php-feature-notice.php", "templates/notices/thanks-for-using-main-dash.php", "templates/partials/non-apache-feature-notice.php", "templates/wp-admin/brute-force/captcha-settings.php", "wp-security-core.php", "wp-security.php"], "skipped": [{"path": "includes/simba-tfa/includes/jquery-qrcode/jquery-qrcode.min.js", "reason": "semgrepignore_patterns_match"}, {"path": "includes/simba-tfa/includes/jquery.blockUI.min.js", "reason": "semgrepignore_patterns_match"}, {"path": "includes/simba-tfa/includes/select2.js", "reason": "analysis_failed_parser_or_internal_error"}, {"path": "includes/simba-tfa/includes/select2.min.js", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/autoload.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/composer/ClassLoader.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/composer/InstalledVersions.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/composer/LICENSE", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/composer/autoload_classmap.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/composer/autoload_namespaces.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/composer/autoload_psr4.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/composer/autoload_real.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/composer/autoload_static.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/composer/installed.json", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/composer/installed.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/LICENSE.txt", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/README.md", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/composer.json", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/ip-lib.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/Address/AddressInterface.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/Address/AssignedRange.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/Address/IPv4.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/Address/IPv6.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/Address/Type.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/Factory.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/ParseStringFlag.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/Range/AbstractRange.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/Range/Pattern.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/Range/RangeInterface.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/Range/Single.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/Range/Subnet.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/Range/Type.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/Service/BinaryMath.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/Service/RangesFromBoundaryCalculator.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/mlocati/ip-lib/src/Service/UnsignedIntegerMath.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/team-updraft/common-libs/CI/php-compatibility.xml", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/team-updraft/common-libs/CI/php-syntax-check.xml", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/team-updraft/common-libs/README.md", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/team-updraft/common-libs/composer.json", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/team-updraft/common-libs/src/updraft-notices/updraft-notices.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/team-updraft/common-libs/src/updraft-rpc/class-udrpc.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/team-updraft/common-libs/src/updraft-semaphore/class-updraft-semaphore.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/team-updraft/common-libs/src/updraft-semaphore/test.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/team-updraft/common-libs/src/updraft-tasks/class-updraft-task-manager-commands.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/team-updraft/common-libs/src/updraft-tasks/class-updraft-task-manager.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/team-updraft/common-libs/src/updraft-tasks/class-updraft-task-meta.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/team-updraft/common-libs/src/updraft-tasks/class-updraft-task-options.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/team-updraft/common-libs/src/updraft-tasks/class-updraft-task.php", "reason": "semgrepignore_patterns_match"}, {"path": "vendor/team-updraft/common-libs/src/updraft-tasks/class-updraft-tasks-activation.php", "reason": "semgrepignore_patterns_match"}]}, "results": [{"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 51, "line": 1369, "offset": 39410}, "extra": {"fingerprint": "760f1e67134cd5ddaeac230af80412f2778c3c04f51268e8ed80986ff072899b5fdca761bf127caa4e3d802dbf29f0b45ca6a20e6f34b3c3dbaf282fb844daf4_0", "is_ignored": false, "lines": "      container.innerHTML = escapeMarkup(content);", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"]}, "metavars": {"$EL": {"abstract_content": "container", "end": {"col": 16, "line": 1369, "offset": 39375}, "start": {"col": 7, "line": 1369, "offset": 39366}}, "$HTML": {"abstract_content": "escapeMarkup(content)", "end": {"col": 50, "line": 1369, "offset": 39409}, "start": {"col": 29, "line": 1369, "offset": 39388}}}, "severity": "ERROR"}, "path": "includes/simba-tfa/includes/select2.js", "start": {"col": 7, "line": 1369, "offset": 39366}}, {"check_id": "php.lang.security.mcrypt-use.mcrypt-use", "end": {"col": 197, "line": 877, "offset": 29686}, "extra": {"fingerprint": "430c839627a7809d2a71f19bee41af4ccd2f7efee9c7f604e1d4f438a214b6bda00d90f85ede2fc8f3f728cae43e5f9a1ba6066b8a9dd0f0dcb7101c38c9b33d_0", "is_ignored": false, "lines": "\t\t\treturn $GLOBALS['simba_two_factor_authentication']->is_mcrypt_deprecated() ? @mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC) : mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);", "message": "Mcrypt functionality has been deprecated and/or removed in recent PHP versions. Consider using Sodium or OpenSSL.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-676: Use of Potentially Dangerous Function"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/intro.mcrypt.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "shortlink": "https://sg.run/BkZR", "source": "https://semgrep.dev/r/php.lang.security.mcrypt-use.mcrypt-use", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {"$FUNC": {"abstract_content": "mcrypt_get_iv_size", "end": {"col": 100, "line": 877, "offset": 29589}, "start": {"col": 82, "line": 877, "offset": 29571}}}, "severity": "ERROR"}, "path": "includes/simba-tfa/providers/totp/loader.php", "start": {"col": 4, "line": 877, "offset": 29493}}, {"check_id": "php.lang.security.mcrypt-use.mcrypt-use", "end": {"col": 229, "line": 889, "offset": 30477}, "extra": {"fingerprint": "f28f12dc98089ce2f5d2ea7a9af1e43e3a3b10077a60c90a98deb055ec0441c332e7750b90be3b7a58dc1e4566830bb3ab3aba1c3006ab198b42813c1b42c523_0", "is_ignored": false, "lines": "\t\t\treturn $GLOBALS['simba_two_factor_authentication']->is_mcrypt_deprecated() ? @mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $string, MCRYPT_MODE_CBC, $iv) : mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $string, MCRYPT_MODE_CBC, $iv);", "message": "Mcrypt functionality has been deprecated and/or removed in recent PHP versions. Consider using Sodium or OpenSSL.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-676: Use of Potentially Dangerous Function"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/intro.mcrypt.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "shortlink": "https://sg.run/BkZR", "source": "https://semgrep.dev/r/php.lang.security.mcrypt-use.mcrypt-use", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {"$FUNC": {"abstract_content": "mcrypt_encrypt", "end": {"col": 96, "line": 889, "offset": 30344}, "start": {"col": 82, "line": 889, "offset": 30330}}}, "severity": "ERROR"}, "path": "includes/simba-tfa/providers/totp/loader.php", "start": {"col": 4, "line": 889, "offset": 30252}}, {"check_id": "php.lang.security.mcrypt-use.mcrypt-use", "end": {"col": 223, "line": 897, "offset": 31114}, "extra": {"fingerprint": "950787c6b2dfc1dedc2f312234d9f023b99a2515a9d56bbbe1567661ec0b05513c6897a801825e7516269c6109bba005f622dce935b2e9ba81afe324048a50e2_0", "is_ignored": false, "lines": "\t\t\treturn $GLOBALS['simba_two_factor_authentication']->is_mcrypt_deprecated() ? @mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $enc, MCRYPT_MODE_CBC, $iv) : mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $enc, MCRYPT_MODE_CBC, $iv);", "message": "Mcrypt functionality has been deprecated and/or removed in recent PHP versions. Consider using Sodium or OpenSSL.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-676: Use of Potentially Dangerous Function"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/intro.mcrypt.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "shortlink": "https://sg.run/BkZR", "source": "https://semgrep.dev/r/php.lang.security.mcrypt-use.mcrypt-use", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {"$FUNC": {"abstract_content": "mcrypt_decrypt", "end": {"col": 96, "line": 897, "offset": 30987}, "start": {"col": 82, "line": 897, "offset": 30973}}}, "severity": "ERROR"}, "path": "includes/simba-tfa/providers/totp/loader.php", "start": {"col": 4, "line": 897, "offset": 30895}}, {"check_id": "php.lang.security.mcrypt-use.mcrypt-use", "end": {"col": 121, "line": 664, "offset": 17507}, "extra": {"fingerprint": "283b420402b042b1570cc6a2327f1a64b206070435702c8f8ca309f333fec3255339ad54f595079dbf7ba75c6539d011c7d5e231341c19d12e39b6f7fc31f893_0", "is_ignored": false, "lines": "\t\t\treturn $this->is_mcrypt_deprecated() ? @mcrypt_create_iv($bytes, MCRYPT_RAND) : mcrypt_create_iv($bytes, MCRYPT_RAND);", "message": "Mcrypt functionality has been deprecated and/or removed in recent PHP versions. Consider using Sodium or OpenSSL.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-676: Use of Potentially Dangerous Function"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/intro.mcrypt.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "shortlink": "https://sg.run/BkZR", "source": "https://semgrep.dev/r/php.lang.security.mcrypt-use.mcrypt-use", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {"$FUNC": {"abstract_content": "mcrypt_create_iv", "end": {"col": 60, "line": 664, "offset": 17446}, "start": {"col": 44, "line": 664, "offset": 17430}}}, "severity": "ERROR"}, "path": "includes/simba-tfa/simba-tfa.php", "start": {"col": 4, "line": 664, "offset": 17390}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 134, "line": 45, "offset": 1466}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$tab", "location": {"end": {"col": 7, "line": 32, "offset": 711}, "path": "admin/wp-security-list-404.php", "start": {"col": 3, "line": 32, "offset": 707}}}, {"content": "$delete_url", "location": {"end": {"col": 14, "line": 38, "offset": 915}, "path": "admin/wp-security-list-404.php", "start": {"col": 3, "line": 38, "offset": 904}}}, {"content": "$delete_url_nonce", "location": {"end": {"col": 20, "line": 40, "offset": 1086}, "path": "admin/wp-security-list-404.php", "start": {"col": 3, "line": 40, "offset": 1069}}}], "taint_sink": ["CliLoc", [{"end": {"col": 134, "line": 45, "offset": 1466}, "path": "admin/wp-security-list-404.php", "start": {"col": 17, "line": 45, "offset": 1349}}, "'<a href=\"'.$delete_url_nonce.'\" onclick=\"return confirm(\\'Are you sure you want to delete this item?\\')\">Delete</a>'"]], "taint_source": ["CliLoc", [{"end": {"col": 30, "line": 32, "offset": 734}, "path": "admin/wp-security-list-404.php", "start": {"col": 21, "line": 32, "offset": 725}}, "$_REQUEST"]]}, "fingerprint": "ab647ed7a7da48834d15d7c13f2baaea3ce612bc8d4f53b490af6414d48e167b309748462720d25d6e0c37ebc3089700ba14ba65c3b42282dfe175f789c7e741_0", "is_ignored": false, "lines": "\t\t\t\t'delete' => '<a href=\"'.$delete_url_nonce.'\" onclick=\"return confirm(\\'Are you sure you want to delete this item?\\')\">Delete</a>',", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "Delete", "end": {"col": 129, "line": 45, "offset": 1461}, "start": {"col": 123, "line": 45, "offset": 1455}}, "$EXPR": {"abstract_content": "$delete_url_nonce.'\" onclick=\"return confirm(\\'Are you sure you want to delete this item?\\')\">Delete</a>'", "end": {"col": 134, "line": 45, "offset": 1466}, "start": {"col": 29, "line": 45, "offset": 1361}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-404.php", "start": {"col": 17, "line": 45, "offset": 1349}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 134, "line": 52, "offset": 2250}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$tab", "location": {"end": {"col": 7, "line": 32, "offset": 711}, "path": "admin/wp-security-list-404.php", "start": {"col": 3, "line": 32, "offset": 707}}}, {"content": "$delete_url", "location": {"end": {"col": 14, "line": 38, "offset": 915}, "path": "admin/wp-security-list-404.php", "start": {"col": 3, "line": 38, "offset": 904}}}, {"content": "$delete_url_nonce", "location": {"end": {"col": 20, "line": 40, "offset": 1086}, "path": "admin/wp-security-list-404.php", "start": {"col": 3, "line": 40, "offset": 1069}}}], "taint_sink": ["CliLoc", [{"end": {"col": 134, "line": 52, "offset": 2250}, "path": "admin/wp-security-list-404.php", "start": {"col": 17, "line": 52, "offset": 2133}}, "'<a href=\"'.$delete_url_nonce.'\" onclick=\"return confirm(\\'Are you sure you want to delete this item?\\')\">Delete</a>'"]], "taint_source": ["CliLoc", [{"end": {"col": 30, "line": 32, "offset": 734}, "path": "admin/wp-security-list-404.php", "start": {"col": 21, "line": 32, "offset": 725}}, "$_REQUEST"]]}, "fingerprint": "ab647ed7a7da48834d15d7c13f2baaea3ce612bc8d4f53b490af6414d48e167b309748462720d25d6e0c37ebc3089700ba14ba65c3b42282dfe175f789c7e741_1", "is_ignored": false, "lines": "\t\t\t\t'delete' => '<a href=\"'.$delete_url_nonce.'\" onclick=\"return confirm(\\'Are you sure you want to delete this item?\\')\">Delete</a>',", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "Delete", "end": {"col": 129, "line": 52, "offset": 2245}, "start": {"col": 123, "line": 52, "offset": 2239}}, "$EXPR": {"abstract_content": "$delete_url_nonce.'\" onclick=\"return confirm(\\'Are you sure you want to delete this item?\\')\">Delete</a>'", "end": {"col": 134, "line": 52, "offset": 2250}, "start": {"col": 29, "line": 52, "offset": 2145}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-404.php", "start": {"col": 17, "line": 52, "offset": 2133}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 116, "line": 334, "offset": 13798}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$_GET", "location": {"end": {"col": 56, "line": 324, "offset": 13249}, "path": "admin/wp-security-list-404.php", "start": {"col": 51, "line": 324, "offset": 13244}}}, {"content": "$order", "location": {"end": {"col": 33, "line": 325, "offset": 13310}, "path": "admin/wp-security-list-404.php", "start": {"col": 27, "line": 325, "offset": 13304}}}], "taint_sink": ["CliLoc", [{"end": {"col": 116, "line": 334, "offset": 13798}, "path": "admin/wp-security-list-404.php", "start": {"col": 31, "line": 334, "offset": 13713}}, "\"SELECT * FROM $events_table_name WHERE `event_type` = '404' ORDER BY $orderby $order"]], "taint_source": ["CliLoc", [{"end": {"col": 56, "line": 324, "offset": 13249}, "path": "admin/wp-security-list-404.php", "start": {"col": 51, "line": 324, "offset": 13244}}, "$_GET"]]}, "fingerprint": "b388aa4b76109bf777028fe0ba9ec6ad743dbff35429dcc4b51c66e2b47d13f470e2c744a3a61db9f965d078af3dd2fb65fd578a028e2a55c8dceedfcdb4faef_0", "is_ignored": false, "lines": "\t\t\t$data = $wpdb->get_results(\"SELECT * FROM $events_table_name WHERE `event_type` = '404' ORDER BY $orderby $order\", ARRAY_A);", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 38, "line": 334, "offset": 13720}, "start": {"col": 32, "line": 334, "offset": 13714}}, "$EXPR": {"abstract_content": "$events_table_name", "end": {"col": 64, "line": 334, "offset": 13746}, "start": {"col": 46, "line": 334, "offset": 13728}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-404.php", "start": {"col": 31, "line": 334, "offset": 13713}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 192, "line": 336, "offset": 14013}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$_GET", "location": {"end": {"col": 56, "line": 324, "offset": 13249}, "path": "admin/wp-security-list-404.php", "start": {"col": 51, "line": 324, "offset": 13244}}}, {"content": "$order", "location": {"end": {"col": 33, "line": 325, "offset": 13310}, "path": "admin/wp-security-list-404.php", "start": {"col": 27, "line": 325, "offset": 13304}}}], "taint_sink": ["CliLoc", [{"end": {"col": 192, "line": 336, "offset": 14013}, "path": "admin/wp-security-list-404.php", "start": {"col": 46, "line": 336, "offset": 13867}}, "\"SELECT * FROM $events_table_name WHERE `ip_or_host` LIKE '%%%s%%' OR `url` LIKE '%%%s%%' OR `referer_info` LIKE '%%%s%%' ORDER BY $orderby $order"]], "taint_source": ["CliLoc", [{"end": {"col": 56, "line": 324, "offset": 13249}, "path": "admin/wp-security-list-404.php", "start": {"col": 51, "line": 324, "offset": 13244}}, "$_GET"]]}, "fingerprint": "b388aa4b76109bf777028fe0ba9ec6ad743dbff35429dcc4b51c66e2b47d13f470e2c744a3a61db9f965d078af3dd2fb65fd578a028e2a55c8dceedfcdb4faef_1", "is_ignored": false, "lines": "\t\t\t$data = $wpdb->get_results($wpdb->prepare(\"SELECT * FROM $events_table_name WHERE `ip_or_host` LIKE '%%%s%%' OR `url` LIKE '%%%s%%' OR `referer_info` LIKE '%%%s%%' ORDER BY $orderby $order\", $search_term, $search_term, $search_term), ARRAY_A);", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 53, "line": 336, "offset": 13874}, "start": {"col": 47, "line": 336, "offset": 13868}}, "$EXPR": {"abstract_content": "$events_table_name", "end": {"col": 79, "line": 336, "offset": 13900}, "start": {"col": 61, "line": 336, "offset": 13882}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-404.php", "start": {"col": 46, "line": 336, "offset": 13867}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 200, "line": 36, "offset": 1222}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$tab", "location": {"end": {"col": 7, "line": 29, "offset": 647}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 3, "line": 29, "offset": 643}}}, {"content": "$delete_url", "location": {"end": {"col": 14, "line": 30, "offset": 707}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 3, "line": 30, "offset": 696}}}, {"content": "$delete_url_nonce", "location": {"end": {"col": 20, "line": 32, "offset": 904}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 3, "line": 32, "offset": 887}}}], "taint_sink": ["CliLoc", [{"end": {"col": 200, "line": 36, "offset": 1222}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 16, "line": 36, "offset": 1038}}, "'<a href=\"'.$delete_url_nonce.'\" onclick=\"return confirm(\\''.esc_js(__('Are you sure you want to delete this item?', 'all-in-one-wp-security-and-firewall')).'\\')\">'.__('Delete').'</a>'"]], "taint_source": ["CliLoc", [{"end": {"col": 43, "line": 29, "offset": 683}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 34, "line": 29, "offset": 674}}, "$_REQUEST"]]}, "fingerprint": "e6b4273cb87823ad1c5495a2f0b49ecc1a70487741a4d26e6e337ca6e736bce77e7ecb47a8219176406395dbcd57fdb99ff0164c402436b2f05fd153b5e5cff5_0", "is_ignored": false, "lines": "\t\t\t'delete' => '<a href=\"'.$delete_url_nonce.'\" onclick=\"return confirm(\\''.esc_js(__('Are you sure you want to delete this item?', 'all-in-one-wp-security-and-firewall')).'\\')\">'.__('Delete').'</a>',", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "Delete", "end": {"col": 191, "line": 36, "offset": 1213}, "start": {"col": 185, "line": 36, "offset": 1207}}, "$EXPR": {"abstract_content": "$delete_url_nonce'\" onclick=\"return confirm(\\''esc_js(__('Are you sure you want to delete this item?''all-in-one-wp-security-and-firewall'))'\\')\">'__('Delete').....'</a>'", "end": {"col": 200, "line": 36, "offset": 1222}, "start": {"col": 28, "line": 36, "offset": 1050}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 16, "line": 36, "offset": 1038}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 92, "line": 190, "offset": 7181}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$_GET", "location": {"end": {"col": 69, "line": 180, "offset": 6631}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 64, "line": 180, "offset": 6626}}}, {"content": "$order", "location": {"end": {"col": 9, "line": 181, "offset": 6670}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 3, "line": 181, "offset": 6664}}}], "taint_sink": ["CliLoc", [{"end": {"col": 92, "line": 190, "offset": 7181}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 31, "line": 190, "offset": 7120}}, "\"SELECT * FROM $login_activity_table ORDER BY $orderby $order"]], "taint_source": ["CliLoc", [{"end": {"col": 69, "line": 180, "offset": 6631}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 64, "line": 180, "offset": 6626}}, "$_GET"]]}, "fingerprint": "6e49957f41f0b8b41f4d0f529c695131fe20f6ae01de3219f6c6232c31c7c9a859c7178deadbff6c73c860564b8575f08186d7d1499d90d9d3fdb85c24a20272_0", "is_ignored": false, "lines": "\t\t\t$data = $wpdb->get_results(\"SELECT * FROM $login_activity_table ORDER BY $orderby $order\", ARRAY_A);", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 38, "line": 190, "offset": 7127}, "start": {"col": 32, "line": 190, "offset": 7121}}, "$EXPR": {"abstract_content": "$login_activity_table", "end": {"col": 67, "line": 190, "offset": 7156}, "start": {"col": 46, "line": 190, "offset": 7135}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 31, "line": 190, "offset": 7120}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 179, "line": 192, "offset": 7383}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$_GET", "location": {"end": {"col": 69, "line": 180, "offset": 6631}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 64, "line": 180, "offset": 6626}}}, {"content": "$order", "location": {"end": {"col": 9, "line": 181, "offset": 6670}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 3, "line": 181, "offset": 6664}}}], "taint_sink": ["CliLoc", [{"end": {"col": 179, "line": 192, "offset": 7383}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 46, "line": 192, "offset": 7250}}, "\"SELECT * FROM $login_activity_table WHERE `user_login` LIKE '%%%s%%' OR `login_ip` LIKE '%%%s%%' ORDER BY $orderby $order  LIMIT 100"]], "taint_source": ["CliLoc", [{"end": {"col": 69, "line": 180, "offset": 6631}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 64, "line": 180, "offset": 6626}}, "$_GET"]]}, "fingerprint": "6e49957f41f0b8b41f4d0f529c695131fe20f6ae01de3219f6c6232c31c7c9a859c7178deadbff6c73c860564b8575f08186d7d1499d90d9d3fdb85c24a20272_1", "is_ignored": false, "lines": "\t\t\t$data = $wpdb->get_results($wpdb->prepare(\"SELECT * FROM $login_activity_table WHERE `user_login` LIKE '%%%s%%' OR `login_ip` LIKE '%%%s%%' ORDER BY $orderby $order  LIMIT 100\", $search_term, $search_term), ARRAY_A);", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 53, "line": 192, "offset": 7257}, "start": {"col": 47, "line": 192, "offset": 7251}}, "$EXPR": {"abstract_content": "$login_activity_table", "end": {"col": 82, "line": 192, "offset": 7286}, "start": {"col": 61, "line": 192, "offset": 7265}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-acct-activity.php", "start": {"col": 46, "line": 192, "offset": 7250}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 95, "line": 112, "offset": 3456}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$_GET", "location": {"end": {"col": 62, "line": 99, "offset": 2759}, "path": "admin/wp-security-list-debug.php", "start": {"col": 57, "line": 99, "offset": 2754}}}, {"content": "$order", "location": {"end": {"col": 39, "line": 100, "offset": 2827}, "path": "admin/wp-security-list-debug.php", "start": {"col": 33, "line": 100, "offset": 2821}}}], "taint_sink": ["CliLoc", [{"end": {"col": 95, "line": 112, "offset": 3456}, "path": "admin/wp-security-list-debug.php", "start": {"col": 36, "line": 112, "offset": 3397}}, "\"SELECT * FROM {$debug_log_tbl} ORDER BY {$orderby} {$order"]], "taint_source": ["CliLoc", [{"end": {"col": 62, "line": 99, "offset": 2759}, "path": "admin/wp-security-list-debug.php", "start": {"col": 57, "line": 99, "offset": 2754}}, "$_GET"]]}, "fingerprint": "4fce029accae1c8f3dfda6715894aade56bd94f5ceb8dd9908dd5c46ffdfaf8aadd7dace6f3d051019390646634cce099bf4d350485c761d0979700d782033a3_0", "is_ignored": false, "lines": "        $data = $wpdb->get_results(\"SELECT * FROM {$debug_log_tbl} ORDER BY {$orderby} {$order}\", 'ARRAY_A');", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 43, "line": 112, "offset": 3404}, "start": {"col": 37, "line": 112, "offset": 3398}}, "$EXPR": {"abstract_content": "$debug_log_tbl", "end": {"col": 66, "line": 112, "offset": 3427}, "start": {"col": 52, "line": 112, "offset": 3413}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-debug.php", "start": {"col": 36, "line": 112, "offset": 3397}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 197, "line": 38, "offset": 1632}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$tab", "location": {"end": {"col": 7, "line": 26, "offset": 594}, "path": "admin/wp-security-list-locked-ip.php", "start": {"col": 3, "line": 26, "offset": 590}}}, {"content": "$delete_lockout_record", "location": {"end": {"col": 25, "line": 27, "offset": 678}, "path": "admin/wp-security-list-locked-ip.php", "start": {"col": 3, "line": 27, "offset": 656}}}, {"content": "$delete_lockout_record_nonce_url", "location": {"end": {"col": 35, "line": 29, "offset": 869}, "path": "admin/wp-security-list-locked-ip.php", "start": {"col": 3, "line": 29, "offset": 837}}}], "taint_sink": ["CliLoc", [{"end": {"col": 197, "line": 38, "offset": 1632}, "path": "admin/wp-security-list-locked-ip.php", "start": {"col": 16, "line": 38, "offset": 1451}}, "'<a href=\"'.$delete_lockout_record_nonce_url.'\" onclick=\"return confirm(\\'Are you sure you want to delete this item?\\')\">'.__('Delete', 'all-in-one-wp-security-and-firewall').'</a>'"]], "taint_source": ["CliLoc", [{"end": {"col": 54, "line": 26, "offset": 641}, "path": "admin/wp-security-list-locked-ip.php", "start": {"col": 45, "line": 26, "offset": 632}}, "$_REQUEST"]]}, "fingerprint": "763ba32a6850136f992432dd67b5ace0e130181a5c35c6886fb355719e20af277126ab5f6e42b49729414acfd1cb155f22f2116f32fdb244ef1aba005239c269_0", "is_ignored": false, "lines": "\t\t\t'delete' => '<a href=\"'.$delete_lockout_record_nonce_url.'\" onclick=\"return confirm(\\'Are you sure you want to delete this item?\\')\">'.__('Delete', 'all-in-one-wp-security-and-firewall').'</a>',", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "Delete", "end": {"col": 149, "line": 38, "offset": 1584}, "start": {"col": 143, "line": 38, "offset": 1578}}, "$EXPR": {"abstract_content": "$delete_lockout_record_nonce_url'\" onclick=\"return confirm(\\'Are you sure you want to delete this item?\\')\">'__('Delete''all-in-one-wp-security-and-firewall')...'</a>'", "end": {"col": 197, "line": 38, "offset": 1632}, "start": {"col": 28, "line": 38, "offset": 1463}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-locked-ip.php", "start": {"col": 16, "line": 38, "offset": 1451}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 125, "line": 233, "offset": 9102}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$_GET", "location": {"end": {"col": 76, "line": 222, "offset": 8519}, "path": "admin/wp-security-list-locked-ip.php", "start": {"col": 71, "line": 222, "offset": 8514}}}, {"content": "$order", "location": {"end": {"col": 9, "line": 223, "offset": 8547}, "path": "admin/wp-security-list-locked-ip.php", "start": {"col": 3, "line": 223, "offset": 8541}}}], "taint_sink": ["CliLoc", [{"end": {"col": 125, "line": 233, "offset": 9102}, "path": "admin/wp-security-list-locked-ip.php", "start": {"col": 45, "line": 233, "offset": 9022}}, "\"SELECT * FROM $lockout_table WHERE `release_date` > %s ORDER BY $orderby $order"]], "taint_source": ["CliLoc", [{"end": {"col": 76, "line": 222, "offset": 8519}, "path": "admin/wp-security-list-locked-ip.php", "start": {"col": 71, "line": 222, "offset": 8514}}, "$_GET"]]}, "fingerprint": "25491223a327af28b3aab0b3ff5e3e5bd73768e8a411fd6422862464b752843ec7d0b112a20a1b228f7113a0262c33e7edbb3cd49361cf05e372817af627a7ab_0", "is_ignored": false, "lines": "\t\t$data = $wpdb->get_results($wpdb->prepare(\"SELECT * FROM $lockout_table WHERE `release_date` > %s ORDER BY $orderby $order\", $now), ARRAY_A);", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 52, "line": 233, "offset": 9029}, "start": {"col": 46, "line": 233, "offset": 9023}}, "$EXPR": {"abstract_content": "$lockout_table", "end": {"col": 74, "line": 233, "offset": 9051}, "start": {"col": 60, "line": 233, "offset": 9037}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-locked-ip.php", "start": {"col": 45, "line": 233, "offset": 9022}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 133, "line": 33, "offset": 1116}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$tab", "location": {"end": {"col": 7, "line": 26, "offset": 627}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 3, "line": 26, "offset": 623}}}, {"content": "$delete_url", "location": {"end": {"col": 14, "line": 27, "offset": 673}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 3, "line": 27, "offset": 662}}}, {"content": "$delete_url_nonce", "location": {"end": {"col": 20, "line": 29, "offset": 866}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 3, "line": 29, "offset": 849}}}], "taint_sink": ["CliLoc", [{"end": {"col": 133, "line": 33, "offset": 1116}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 16, "line": 33, "offset": 999}}, "'<a href=\"'.$delete_url_nonce.'\" onclick=\"return confirm(\\'Are you sure you want to delete this item?\\')\">Delete</a>'"]], "taint_source": ["CliLoc", [{"end": {"col": 30, "line": 26, "offset": 650}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 21, "line": 26, "offset": 641}}, "$_REQUEST"]]}, "fingerprint": "7dd6e5d8253ec774bce4279a96295da2fbf0919ae99593b1f5ed614b707454e1ff939f6528f0ca8744aa38d8b5aaf08095e11cc34fd84948cbb6dfe3978ade93_0", "is_ignored": false, "lines": "\t\t\t'delete' => '<a href=\"'.$delete_url_nonce.'\" onclick=\"return confirm(\\'Are you sure you want to delete this item?\\')\">Delete</a>',", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "Delete", "end": {"col": 128, "line": 33, "offset": 1111}, "start": {"col": 122, "line": 33, "offset": 1105}}, "$EXPR": {"abstract_content": "$delete_url_nonce.'\" onclick=\"return confirm(\\'Are you sure you want to delete this item?\\')\">Delete</a>'", "end": {"col": 133, "line": 33, "offset": 1116}, "start": {"col": 28, "line": 33, "offset": 1011}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 16, "line": 33, "offset": 999}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 96, "line": 176, "offset": 6658}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$_GET", "location": {"end": {"col": 56, "line": 167, "offset": 6113}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 51, "line": 167, "offset": 6108}}}, {"content": "$order", "location": {"end": {"col": 33, "line": 168, "offset": 6175}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 27, "line": 168, "offset": 6169}}}], "taint_sink": ["CliLoc", [{"end": {"col": 96, "line": 176, "offset": 6658}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 31, "line": 176, "offset": 6593}}, "\"SELECT * FROM $failed_logins_table_name ORDER BY $orderby $order"]], "taint_source": ["CliLoc", [{"end": {"col": 56, "line": 167, "offset": 6113}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 51, "line": 167, "offset": 6108}}, "$_GET"]]}, "fingerprint": "3df48dad41e2f24743c79adca50249a10197b9af6030d07930c7c1afb5fba078b610ca998849e776e2cdd576e8987af79449ade7d8faf18d6378ddfc68ba77ff_0", "is_ignored": false, "lines": "\t\t\t$data = $wpdb->get_results(\"SELECT * FROM $failed_logins_table_name ORDER BY $orderby $order\", ARRAY_A);", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 38, "line": 176, "offset": 6600}, "start": {"col": 32, "line": 176, "offset": 6594}}, "$EXPR": {"abstract_content": "$failed_logins_table_name", "end": {"col": 71, "line": 176, "offset": 6633}, "start": {"col": 46, "line": 176, "offset": 6608}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 31, "line": 176, "offset": 6593}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 180, "line": 178, "offset": 6861}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$_GET", "location": {"end": {"col": 56, "line": 167, "offset": 6113}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 51, "line": 167, "offset": 6108}}}, {"content": "$order", "location": {"end": {"col": 33, "line": 168, "offset": 6175}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 27, "line": 168, "offset": 6169}}}], "taint_sink": ["CliLoc", [{"end": {"col": 180, "line": 178, "offset": 6861}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 46, "line": 178, "offset": 6727}}, "\"SELECT * FROM $failed_logins_table_name WHERE `user_login` LIKE '%%%s%%' OR `login_attempt_ip` LIKE '%%%s%%' ORDER BY $orderby $order"]], "taint_source": ["CliLoc", [{"end": {"col": 56, "line": 167, "offset": 6113}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 51, "line": 167, "offset": 6108}}, "$_GET"]]}, "fingerprint": "3df48dad41e2f24743c79adca50249a10197b9af6030d07930c7c1afb5fba078b610ca998849e776e2cdd576e8987af79449ade7d8faf18d6378ddfc68ba77ff_1", "is_ignored": false, "lines": "\t\t\t$data = $wpdb->get_results($wpdb->prepare(\"SELECT * FROM $failed_logins_table_name WHERE `user_login` LIKE '%%%s%%' OR `login_attempt_ip` LIKE '%%%s%%' ORDER BY $orderby $order\", $search_term, $search_term), ARRAY_A);", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 53, "line": 178, "offset": 6734}, "start": {"col": 47, "line": 178, "offset": 6728}}, "$EXPR": {"abstract_content": "$failed_logins_table_name", "end": {"col": 86, "line": 178, "offset": 6767}, "start": {"col": 61, "line": 178, "offset": 6742}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-login-fails.php", "start": {"col": 46, "line": 178, "offset": 6727}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 96, "line": 171, "offset": 6404}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$_GET", "location": {"end": {"col": 56, "line": 161, "offset": 5878}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 51, "line": 161, "offset": 5873}}}, {"content": "$order", "location": {"end": {"col": 33, "line": 162, "offset": 5940}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 27, "line": 162, "offset": 5934}}}], "taint_sink": ["CliLoc", [{"end": {"col": 96, "line": 171, "offset": 6404}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 31, "line": 171, "offset": 6339}}, "\"SELECT * FROM \" . $block_table_name . \" ORDER BY $orderby $order"]], "taint_source": ["CliLoc", [{"end": {"col": 56, "line": 161, "offset": 5878}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 51, "line": 161, "offset": 5873}}, "$_GET"]]}, "fingerprint": "8c5302456193820c9aa7c0febbdac73bfae1d7507603a7a0ce298fdb8241d18f954edfd0befc37cc19f494d73aa26bdc0626f47e91cbe680cd65bff4f6168e4c_0", "is_ignored": false, "lines": "\t\t\t$data = $wpdb->get_results(\"SELECT * FROM \" . $block_table_name . \" ORDER BY $orderby $order\", ARRAY_A);", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 38, "line": 171, "offset": 6346}, "start": {"col": 32, "line": 171, "offset": 6340}}, "$EXPR": {"abstract_content": "$block_table_name.\" ORDER BY $orderby $order", "end": {"col": 96, "line": 171, "offset": 6404}, "start": {"col": 50, "line": 171, "offset": 6358}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 31, "line": 171, "offset": 6339}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 96, "line": 171, "offset": 6404}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$_GET", "location": {"end": {"col": 56, "line": 161, "offset": 5878}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 51, "line": 161, "offset": 5873}}}, {"content": "$order", "location": {"end": {"col": 33, "line": 162, "offset": 5940}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 27, "line": 162, "offset": 5934}}}], "taint_sink": ["CliLoc", [{"end": {"col": 96, "line": 171, "offset": 6404}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 70, "line": 171, "offset": 6378}}, "\" ORDER BY $orderby $order"]], "taint_source": ["CliLoc", [{"end": {"col": 56, "line": 161, "offset": 5878}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 51, "line": 161, "offset": 5873}}, "$_GET"]]}, "fingerprint": "b80a80717417548eac6f3011c8c8326be06b0b274bde9a21944f806e8d05cf1292072362320294e472f897e45997d46aa751836d7a22220f3e9feadc647604a5_0", "is_ignored": false, "lines": "\t\t\t$data = $wpdb->get_results(\"SELECT * FROM \" . $block_table_name . \" ORDER BY $orderby $order\", ARRAY_A);", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 38, "line": 171, "offset": 6346}, "start": {"col": 32, "line": 171, "offset": 6340}}, "$EXPR": {"abstract_content": "$orderby", "end": {"col": 89, "line": 171, "offset": 6397}, "propagated_value": {"svalue_abstract_content": "AIOWPSecurity_Utility::sanitize_value_by_array($orderby$sortable)", "svalue_end": {"col": 81, "line": 167, "offset": 6179}, "svalue_start": {"col": 14, "line": 167, "offset": 6112}}, "start": {"col": 81, "line": 171, "offset": 6389}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 70, "line": 171, "offset": 6378}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 242, "line": 173, "offset": 6669}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$_GET", "location": {"end": {"col": 56, "line": 161, "offset": 5878}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 51, "line": 161, "offset": 5873}}}, {"content": "$order", "location": {"end": {"col": 33, "line": 162, "offset": 5940}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 27, "line": 162, "offset": 5934}}}], "taint_sink": ["CliLoc", [{"end": {"col": 242, "line": 173, "offset": 6669}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 46, "line": 173, "offset": 6473}}, "\"SELECT * FROM \" . $block_table_name . \" WHERE `blocked_ip` LIKE '%%%s%%' OR `block_reason` LIKE '%%%s%%' OR `country_origin` LIKE '%%%s%%' OR `blocked_date` LIKE '%%%s%%' ORDER BY $orderby $order"]], "taint_source": ["CliLoc", [{"end": {"col": 56, "line": 161, "offset": 5878}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 51, "line": 161, "offset": 5873}}, "$_GET"]]}, "fingerprint": "f408674b39444d1164eeb43613872ec43bf3a23a100dc6384245eb0940b92e4d737a2fdb30fa72e84a59b604b887553264e03d7953019a5237ca98fcadb7fb01_0", "is_ignored": false, "lines": "\t\t\t$data = $wpdb->get_results($wpdb->prepare(\"SELECT * FROM \" . $block_table_name . \" WHERE `blocked_ip` LIKE '%%%s%%' OR `block_reason` LIKE '%%%s%%' OR `country_origin` LIKE '%%%s%%' OR `blocked_date` LIKE '%%%s%%' ORDER BY $orderby $order\", $search, $search, $search, $search), ARRAY_A);", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 53, "line": 173, "offset": 6480}, "start": {"col": 47, "line": 173, "offset": 6474}}, "$EXPR": {"abstract_content": "$block_table_name.\" WHERE `blocked_ip` LIKE '%%%s%%' OR `block_reason` LIKE '%%%s%%' OR `country_origin` LIKE '%%%s%%' OR `blocked_date` LIKE '%%%s%%' ORDER BY $orderby $order", "end": {"col": 242, "line": 173, "offset": 6669}, "start": {"col": 65, "line": 173, "offset": 6492}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 46, "line": 173, "offset": 6473}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 242, "line": 173, "offset": 6669}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$_GET", "location": {"end": {"col": 56, "line": 161, "offset": 5878}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 51, "line": 161, "offset": 5873}}}, {"content": "$order", "location": {"end": {"col": 33, "line": 162, "offset": 5940}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 27, "line": 162, "offset": 5934}}}], "taint_sink": ["CliLoc", [{"end": {"col": 242, "line": 173, "offset": 6669}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 85, "line": 173, "offset": 6512}}, "\" WHERE `blocked_ip` LIKE '%%%s%%' OR `block_reason` LIKE '%%%s%%' OR `country_origin` LIKE '%%%s%%' OR `blocked_date` LIKE '%%%s%%' ORDER BY $orderby $order"]], "taint_source": ["CliLoc", [{"end": {"col": 56, "line": 161, "offset": 5878}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 51, "line": 161, "offset": 5873}}, "$_GET"]]}, "fingerprint": "b80a80717417548eac6f3011c8c8326be06b0b274bde9a21944f806e8d05cf1292072362320294e472f897e45997d46aa751836d7a22220f3e9feadc647604a5_1", "is_ignored": false, "lines": "\t\t\t$data = $wpdb->get_results($wpdb->prepare(\"SELECT * FROM \" . $block_table_name . \" WHERE `blocked_ip` LIKE '%%%s%%' OR `block_reason` LIKE '%%%s%%' OR `country_origin` LIKE '%%%s%%' OR `blocked_date` LIKE '%%%s%%' ORDER BY $orderby $order\", $search, $search, $search, $search), ARRAY_A);", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 53, "line": 173, "offset": 6480}, "start": {"col": 47, "line": 173, "offset": 6474}}, "$EXPR": {"abstract_content": "$orderby", "end": {"col": 235, "line": 173, "offset": 6662}, "propagated_value": {"svalue_abstract_content": "AIOWPSecurity_Utility::sanitize_value_by_array($orderby$sortable)", "svalue_end": {"col": 81, "line": 167, "offset": 6179}, "svalue_start": {"col": 14, "line": 167, "offset": 6112}}, "start": {"col": 227, "line": 173, "offset": 6654}}}, "severity": "ERROR"}, "path": "admin/wp-security-list-permanent-blocked-ip.php", "start": {"col": 85, "line": 173, "offset": 6512}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 145, "line": 258, "offset": 14357}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$_POST", "location": {"end": {"col": 26, "line": 240, "offset": 13262}, "path": "admin/wp-security-user-accounts-menu.php", "start": {"col": 20, "line": 240, "offset": 13256}}}, {"content": "$new_username", "location": {"end": {"col": 26, "line": 241, "offset": 13316}, "path": "admin/wp-security-user-accounts-menu.php", "start": {"col": 13, "line": 241, "offset": 13303}}}], "taint_sink": ["CliLoc", [{"end": {"col": 145, "line": 258, "offset": 14357}, "path": "admin/wp-security-user-accounts-menu.php", "start": {"col": 44, "line": 258, "offset": 14256}}, "\"UPDATE `\" . $wpdb->users . \"` SET user_login = '\" . esc_sql($new_username) . \"' WHERE user_login=%s\""]], "taint_source": ["CliLoc", [{"end": {"col": 26, "line": 240, "offset": 13262}, "path": "admin/wp-security-user-accounts-menu.php", "start": {"col": 20, "line": 240, "offset": 13256}}, "$_POST"]]}, "fingerprint": "6dca3aeee8c1398a0483fc52119a4ab936e3fc783c7e2b3adcd0a3d208f63279c48e444fd9ed2df746fdac636a7cc378679047f1c8df32ef56a4d1b9ae0fee4a_0", "is_ignored": false, "lines": "                    $sql = $wpdb->prepare( \"UPDATE `\" . $wpdb->users . \"` SET user_login = '\" . esc_sql($new_username) . \"' WHERE user_login=%s\", \"admin\" );", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "UPDATE", "end": {"col": 51, "line": 258, "offset": 14263}, "start": {"col": 45, "line": 258, "offset": 14257}}, "$EXPR": {"abstract_content": "$wpdb->users\"` SET user_login = '\"esc_sql($new_username)...\"' WHERE user_login=%s\"", "end": {"col": 145, "line": 258, "offset": 14357}, "start": {"col": 57, "line": 258, "offset": 14269}}}, "severity": "ERROR"}, "path": "admin/wp-security-user-accounts-menu.php", "start": {"col": 44, "line": 258, "offset": 14256}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 153, "line": 272, "offset": 15493}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$_POST", "location": {"end": {"col": 26, "line": 240, "offset": 13262}, "path": "admin/wp-security-user-accounts-menu.php", "start": {"col": 20, "line": 240, "offset": 13256}}}, {"content": "$new_username", "location": {"end": {"col": 26, "line": 241, "offset": 13316}, "path": "admin/wp-security-user-accounts-menu.php", "start": {"col": 13, "line": 241, "offset": 13303}}}, {"content": "$newAdmins", "location": {"end": {"col": 35, "line": 271, "offset": 15233}, "path": "admin/wp-security-user-accounts-menu.php", "start": {"col": 25, "line": 271, "offset": 15223}}}], "taint_sink": ["CliLoc", [{"end": {"col": 153, "line": 272, "offset": 15493}, "path": "admin/wp-security-user-accounts-menu.php", "start": {"col": 39, "line": 272, "offset": 15379}}, "\"UPDATE `\" . $wpdb->sitemeta . \"` SET meta_value = '\" . esc_sql( $newAdmins ) . \"' WHERE meta_key = 'site_admins'\""]], "taint_source": ["CliLoc", [{"end": {"col": 26, "line": 240, "offset": 13262}, "path": "admin/wp-security-user-accounts-menu.php", "start": {"col": 20, "line": 240, "offset": 13256}}, "$_POST"]]}, "fingerprint": "f30482a2267bdb7cef1b36f5f39042c7c40035c7992e764bd0c3b42f1af67140fa8d4f98fdcfa325973d01854c1560781e629b78b763484b44187a5b3e6a0dab_0", "is_ignored": false, "lines": "                        $wpdb->query( \"UPDATE `\" . $wpdb->sitemeta . \"` SET meta_value = '\" . esc_sql( $newAdmins ) . \"' WHERE meta_key = 'site_admins'\" );", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$1": {"abstract_content": "UPDATE", "end": {"col": 46, "line": 272, "offset": 15386}, "start": {"col": 40, "line": 272, "offset": 15380}}, "$EXPR": {"abstract_content": "$wpdb->sitemeta\"` SET meta_value = '\"esc_sql($newAdmins)...\"' WHERE meta_key = 'site_admins'\"", "end": {"col": 153, "line": 272, "offset": 15493}, "start": {"col": 52, "line": 272, "offset": 15392}}}, "severity": "ERROR"}, "path": "admin/wp-security-user-accounts-menu.php", "start": {"col": 39, "line": 272, "offset": 15379}}, {"check_id": "php.lang.security.preg-replace-eval.preg-replace-eval", "end": {"col": 85, "line": 172, "offset": 4202}, "extra": {"fingerprint": "6b4f3934e565e8f097ef7aac9ab9e011d14aed14bfc329aa855f7360082cb3a765e820c0e7187812df9716b09289b4d076e4ac81570fe59cf700dc76408010ac_0", "is_ignored": false, "lines": "\t\t$contents = preg_replace($this->get_regex_pattern(), \"\", $contents, -1, $removed);", "message": "Calling preg_replace with user input in the pattern can lead to arbitrary code execution. The eval modifier (`/e`) evaluates the replacement argument as code.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.preg-replace.php", "https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PregReplaceSniff.php"], "shortlink": "https://sg.run/0Qzw", "source": "https://semgrep.dev/r/php.lang.security.preg-replace-eval.preg-replace-eval", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "ERROR"}, "path": "classes/wp-security-block-file.php", "start": {"col": 3, "line": 172, "offset": 4120}}, {"check_id": "php.lang.security.preg-replace-eval.preg-replace-eval", "end": {"col": 80, "line": 734, "offset": 24113}, "extra": {"fingerprint": "0a3785bba489228280e4a4fee953f9c542df83a07bbc19d0fb0c1193697461d9a33ef8647a1224f431e44b087b01f903adea8257632a4c850ae603039d6f5d7f_0", "is_ignored": false, "lines": "\t\treturn preg_replace(\"/(.{\".$chars_unmasked.\"}$)(*SKIP)(*F)|(.)/u\", \"*\", $str);", "message": "Calling preg_replace with user input in the pattern can lead to arbitrary code execution. The eval modifier (`/e`) evaluates the replacement argument as code.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.preg-replace.php", "https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PregReplaceSniff.php"], "shortlink": "https://sg.run/0Qzw", "source": "https://semgrep.dev/r/php.lang.security.preg-replace-eval.preg-replace-eval", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "ERROR"}, "path": "classes/wp-security-utility.php", "start": {"col": 3, "line": 734, "offset": 24036}}, {"check_id": "php.lang.security.injection.tainted-filename.tainted-filename", "end": {"col": 75, "line": 87, "offset": 3327}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$_POST", "location": {"end": {"col": 41, "line": 84, "offset": 2944}, "path": "admin/wp-security-filesystem-menu.php", "start": {"col": 35, "line": 84, "offset": 2938}}}], "taint_sink": ["CliLoc", [{"end": {"col": 75, "line": 87, "offset": 3327}, "path": "admin/wp-security-filesystem-menu.php", "start": {"col": 39, "line": 87, "offset": 3291}}, "$_POST['aiowps_permission_chg_file']"]], "taint_source": ["CliLoc", [{"end": {"col": 41, "line": 84, "offset": 2944}, "path": "admin/wp-security-filesystem-menu.php", "start": {"col": 35, "line": 84, "offset": 2938}}, "$_POST"]]}, "fingerprint": "496310a15feffee11aea1466b75e990edccf180baad71a49e8f2358416c0f2fb88a396e8c3a1d91481e6e9b3ee582b2adc93cdc5c8eaedf41cf00a3066d5e6cb_0", "is_ignored": false, "lines": "                $perm_result = @chmod($_POST['aiowps_permission_chg_file'], $rec_perm_dec);", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "shortlink": "https://sg.run/Ayqp", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename", "subcategory": ["vuln"], "technology": ["php"]}, "metavars": {"$FILENAME": {"abstract_content": "$_POST['aiowps_permission_chg_file']", "end": {"col": 75, "line": 87, "offset": 3327}, "start": {"col": 39, "line": 87, "offset": 3291}}}, "severity": "WARNING"}, "path": "admin/wp-security-filesystem-menu.php", "start": {"col": 39, "line": 87, "offset": 3291}}, {"check_id": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp", "end": {"col": 62, "line": 226, "offset": 8325}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "name", "location": {"end": {"col": 34, "line": 223, "offset": 8184}, "path": "js/wp-security-admin-script.js", "start": {"col": 30, "line": 223, "offset": 8180}}}], "taint_sink": ["CliLoc", [{"end": {"col": 62, "line": 226, "offset": 8325}, "path": "js/wp-security-admin-script.js", "start": {"col": 15, "line": 226, "offset": 8278}}, "new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\")"]], "taint_source": ["CliLoc", [{"end": {"col": 34, "line": 223, "offset": 8184}, "path": "js/wp-security-admin-script.js", "start": {"col": 30, "line": 223, "offset": 8180}}, "name"]]}, "fingerprint": "e715a1e6508389db3aa9e54a6090bc7f48ef049f60aaee8442281bb3afb3b3b74dc0efd4c48e28683c67666d4a5d2cc9df7dd6398235e17baaff77f345d64ec4_0", "is_ignored": false, "lines": "\t\tvar regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),", "message": "RegExp() called with a `name` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-1333: Inefficient Regular Expression Complexity"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"], "shortlink": "https://sg.run/gr65", "source": "https://semgrep.dev/r/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp", "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js", "subcategory": ["vuln"], "technology": ["javascript"]}, "metavars": {"$ARG": {"abstract_content": "name", "end": {"col": 34, "line": 223, "offset": 8184}, "start": {"col": 30, "line": 223, "offset": 8180}}}, "severity": "WARNING"}, "path": "js/wp-security-admin-script.js", "start": {"col": 15, "line": 226, "offset": 8278}}, {"check_id": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop", "end": {"col": 61, "line": 149, "offset": 5798}, "extra": {"fingerprint": "df23b68eb81ec3fc95f3db5387a65d473b4d6ff745e60f6107fd231334b3ae2b03be68d9af62404b268912ea99d3b81806c51d41982430fc0a37cf111f740846_0", "is_ignored": false, "lines": "                            mapValue = mapValue[nameSegment];", "message": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A08:2021 - Software and Data Integrity Failures"], "references": ["https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf"], "shortlink": "https://sg.run/w1DB", "source": "https://semgrep.dev/r/javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop", "subcategory": ["audit"], "technology": ["typescript"]}, "metavars": {"$A": {"abstract_content": "nameSegment", "end": {"col": 60, "line": 149, "offset": 5797}, "start": {"col": 49, "line": 149, "offset": 5786}}, "$SMTH": {"abstract_content": "mapValue", "end": {"col": 37, "line": 149, "offset": 5774}, "start": {"col": 29, "line": 149, "offset": 5766}}}, "severity": "WARNING"}, "path": "includes/simba-tfa/includes/select2.js", "start": {"col": 29, "line": 149, "offset": 5766}}, {"check_id": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop", "end": {"col": 35, "line": 703, "offset": 22283}, "extra": {"fingerprint": "2226bc0d6405690d2b0d51e468fa6f0994b2251d87e1336e64615ea10591d10dbf68383931cc9f9ba3e1dc73bf35a9497fdea984e6fa98f10c2b45e1cadc85bd_0", "is_ignored": false, "lines": "        dataLevel = dataLevel[key];", "message": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A08:2021 - Software and Data Integrity Failures"], "references": ["https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf"], "shortlink": "https://sg.run/w1DB", "source": "https://semgrep.dev/r/javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop", "subcategory": ["audit"], "technology": ["typescript"]}, "metavars": {"$A": {"abstract_content": "key", "end": {"col": 34, "line": 703, "offset": 22282}, "start": {"col": 31, "line": 703, "offset": 22279}}, "$SMTH": {"abstract_content": "dataLevel", "end": {"col": 18, "line": 703, "offset": 22266}, "start": {"col": 9, "line": 703, "offset": 22257}}}, "severity": "WARNING"}, "path": "includes/simba-tfa/includes/select2.js", "start": {"col": 9, "line": 703, "offset": 22257}}, {"check_id": "php.lang.security.non-literal-header.non-literal-header", "end": {"col": 65, "line": 72, "offset": 2031}, "extra": {"fingerprint": "c06b93eb0d73027eac74a37649f318ff27634a7f9e04436a4efb4e36ec67c75035ef361a03a7c47e121751efbedeb35552af6064909f99be025549e60569b631_0", "is_ignored": false, "lines": "\t\theader(\"Content-Disposition: attachment; filename=\".$filename);", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "shortlink": "https://sg.run/9rL8", "source": "https://semgrep.dev/r/php.lang.security.non-literal-header.non-literal-header", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "WARNING"}, "path": "admin/wp-security-admin-init.php", "start": {"col": 3, "line": 72, "offset": 1969}}, {"check_id": "php.lang.security.non-literal-header.non-literal-header", "end": {"col": 38, "line": 22, "offset": 353}, "extra": {"fingerprint": "d377ac670b1f013fa9c000d2cfdd2419232f691b520a5a5c11ce42b1e3179dd67fb2700adf7fce95a76141a8479507239a9e604a646bfcd90c22c2bcdd3c3dad_0", "is_ignored": false, "lines": "\t\theader(\"Location: $this->location\");", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "shortlink": "https://sg.run/9rL8", "source": "https://semgrep.dev/r/php.lang.security.non-literal-header.non-literal-header", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "WARNING"}, "path": "classes/firewall/rule/actions/action-redirect-trait.php", "start": {"col": 3, "line": 22, "offset": 318}}, {"check_id": "php.lang.security.non-literal-header.non-literal-header", "end": {"col": 66, "line": 234, "offset": 7898}, "extra": {"fingerprint": "920d34db04125a5a90f50a5492263bf9c014a4186a9e8d5e16ab208c78cc71dafff12c90198e9d889aebdbe0c525a41ca4d5bb8abe4185df73be223131f0b7d2_0", "is_ignored": false, "lines": "\t\theader('Content-Disposition: attachment; filename='.$file_name);", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "shortlink": "https://sg.run/9rL8", "source": "https://semgrep.dev/r/php.lang.security.non-literal-header.non-literal-header", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "WARNING"}, "path": "classes/wp-security-utility-file.php", "start": {"col": 3, "line": 234, "offset": 7835}}, {"check_id": "php.lang.security.non-literal-header.non-literal-header", "end": {"col": 47, "line": 239, "offset": 8089}, "extra": {"fingerprint": "920d34db04125a5a90f50a5492263bf9c014a4186a9e8d5e16ab208c78cc71dafff12c90198e9d889aebdbe0c525a41ca4d5bb8abe4185df73be223131f0b7d2_1", "is_ignored": false, "lines": "\t\theader('Content-Length: ' . filesize($file));", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "shortlink": "https://sg.run/9rL8", "source": "https://semgrep.dev/r/php.lang.security.non-literal-header.non-literal-header", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "WARNING"}, "path": "classes/wp-security-utility-file.php", "start": {"col": 3, "line": 239, "offset": 8045}}, {"check_id": "php.lang.security.non-literal-header.non-literal-header", "end": {"col": 68, "line": 255, "offset": 8599}, "extra": {"fingerprint": "920d34db04125a5a90f50a5492263bf9c014a4186a9e8d5e16ab208c78cc71dafff12c90198e9d889aebdbe0c525a41ca4d5bb8abe4185df73be223131f0b7d2_2", "is_ignored": false, "lines": "\t\theader(\"Content-disposition: attachment; filename=\" . $file_name);", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "shortlink": "https://sg.run/9rL8", "source": "https://semgrep.dev/r/php.lang.security.non-literal-header.non-literal-header", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "WARNING"}, "path": "classes/wp-security-utility-file.php", "start": {"col": 3, "line": 255, "offset": 8534}}, {"check_id": "php.lang.security.non-literal-header.non-literal-header", "end": {"col": 47, "line": 257, "offset": 8694}, "extra": {"fingerprint": "920d34db04125a5a90f50a5492263bf9c014a4186a9e8d5e16ab208c78cc71dafff12c90198e9d889aebdbe0c525a41ca4d5bb8abe4185df73be223131f0b7d2_3", "is_ignored": false, "lines": "\t\theader(\"Content-Length: \" . strlen($output));", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "shortlink": "https://sg.run/9rL8", "source": "https://semgrep.dev/r/php.lang.security.non-literal-header.non-literal-header", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "WARNING"}, "path": "classes/wp-security-utility-file.php", "start": {"col": 3, "line": 257, "offset": 8650}}, {"check_id": "php.lang.security.non-literal-header.non-literal-header", "end": {"col": 31, "line": 78, "offset": 2091}, "extra": {"fingerprint": "49bf40d8ac139a0f8ea212cfe4403d8a191f8324b02a19d2cccd52f30bde2bca787e7e08c6f4d5c82e9799255bb1acac303f8c58524185df11108b722f5a3e7c_0", "is_ignored": false, "lines": "\t\t\theader('Location: ' . $url);", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "shortlink": "https://sg.run/9rL8", "source": "https://semgrep.dev/r/php.lang.security.non-literal-header.non-literal-header", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "WARNING"}, "path": "classes/wp-security-utility.php", "start": {"col": 4, "line": 78, "offset": 2064}}, {"check_id": "php.lang.security.non-literal-header.non-literal-header", "end": {"col": 88, "line": 430, "offset": 13350}, "extra": {"fingerprint": "47e0b7d22a433048460dabcf90a965a4760753a06453e38e4c2685d7cc02228d276a4a4cce8455853c8562b217e451be77f314837720a703deb653d99a4704c5_0", "is_ignored": false, "lines": "header('Content-Type: '.get_bloginfo('html_type').'; charset='.get_bloginfo('charset'));", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "shortlink": "https://sg.run/9rL8", "source": "https://semgrep.dev/r/php.lang.security.non-literal-header.non-literal-header", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "WARNING"}, "path": "other-includes/wp-security-rename-login-feature-pre-5-2.php", "start": {"col": 1, "line": 430, "offset": 13263}}, {"check_id": "php.lang.security.non-literal-header.non-literal-header", "end": {"col": 94, "line": 526, "offset": 15419}, "extra": {"fingerprint": "b3443b23b42fe785e51a5c363e1cf6e0bdb40ded5c07e16efd8f9e8497d387bad695c9e6e73677e257628ad0a84ae1ed6087071fbf15ddcf09befd4be02e8db5_0", "is_ignored": false, "lines": "header('Content-Type: ' . get_bloginfo('html_type') . '; charset=' . get_bloginfo('charset'));", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "shortlink": "https://sg.run/9rL8", "source": "https://semgrep.dev/r/php.lang.security.non-literal-header.non-literal-header", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "WARNING"}, "path": "other-includes/wp-security-rename-login-feature-pre-5-7.php", "start": {"col": 1, "line": 526, "offset": 15326}}, {"check_id": "php.lang.security.non-literal-header.non-literal-header", "end": {"col": 94, "line": 384, "offset": 10210}, "extra": {"fingerprint": "5e0c27e1863d0e8a79df776a7c329a643869ed0108c22a8c645f31d7e9d25dca94ac3b1dd3d23f9eb2f0b707e0ab0f95363645086a8db3dfc9834922864217f3_0", "is_ignored": false, "lines": "header('Content-Type: ' . get_bloginfo('html_type') . '; charset=' . get_bloginfo('charset'));", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "shortlink": "https://sg.run/9rL8", "source": "https://semgrep.dev/r/php.lang.security.non-literal-header.non-literal-header", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "WARNING"}, "path": "other-includes/wp-security-rename-login-feature.php", "start": {"col": 1, "line": 384, "offset": 10117}}, {"check_id": "php.lang.security.unlink-use.unlink-use", "end": {"col": 31, "line": 839, "offset": 38078}, "extra": {"fingerprint": "213b3c0e374b36b1f159237f1bef9729cbd2a0dd8917bc1acc1e1c8f371561cb65aaa8a0cf9d6304612940ff75d78d1670c2617c4b5dc5d5e76f8a56135209bf_0", "is_ignored": false, "lines": "\t\t\tunlink($backtrace_filepath);", "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "references": ["https://www.php.net/manual/en/function.unlink", "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"], "shortlink": "https://sg.run/rYeR", "source": "https://semgrep.dev/r/php.lang.security.unlink-use.unlink-use", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "WARNING"}, "path": "classes/wp-security-user-login.php", "start": {"col": 4, "line": 839, "offset": 38051}}, {"check_id": "php.lang.security.unlink-use.unlink-use", "end": {"col": 31, "line": 457, "offset": 16232}, "extra": {"fingerprint": "46055ab881e023f7cca594449e5dbad0a502e84eead0e4cea231ff5846483dfaf98ba15480de490b9b14cd2a94ded10cedfa04e2dfc3e1cbe239eda4a93427c5_0", "is_ignored": false, "lines": "\t\t\t\t\t\t@unlink($dir.'/'.$entry);// phpcs:ignore Generic.PHP.NoSilencedErrors.Discouraged", "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "references": ["https://www.php.net/manual/en/function.unlink", "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"], "shortlink": "https://sg.run/rYeR", "source": "https://semgrep.dev/r/php.lang.security.unlink-use.unlink-use", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "WARNING"}, "path": "classes/wp-security-utility-file.php", "start": {"col": 8, "line": 457, "offset": 16209}}, {"check_id": "php.lang.security.unlink-use.unlink-use", "end": {"col": 27, "line": 211, "offset": 5528}, "extra": {"fingerprint": "14ad9a563d5823a03fef6b9adfa1b1f35dd5bceae0e54cc95a65eb618d1baee7521cbf1011f6fccfa05c89c96b09ada7da0144db216a897b79151b3193931c42_0", "is_ignored": false, "lines": "\t\t\t@unlink($muplugin_path); // phpcs:ignore Generic.PHP.NoSilencedErrors.Discouraged -- ignore this", "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "references": ["https://www.php.net/manual/en/function.unlink", "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"], "shortlink": "https://sg.run/rYeR", "source": "https://semgrep.dev/r/php.lang.security.unlink-use.unlink-use", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "WARNING"}, "path": "classes/wp-security-utility-firewall.php", "start": {"col": 5, "line": 211, "offset": 5506}}, {"check_id": "php.lang.security.unserialize-use.unserialize-use", "end": {"col": 55, "line": 521, "offset": 13679}, "extra": {"fingerprint": "2e305ba3b0a8aee69d591262ad9c43d74f22f22ec140aede7657f93014e1d52cd9cdc384d005f313c2e7c3d3d7b03bf700873d6f260fef0d76483226df68b453_0", "is_ignored": false, "lines": "\t\t\t\t\t$site_roles = unserialize($role_info->meta_value);", "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-502: Deserialization of Untrusted Data"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A08:2017 - Insecure Deserialization", "A08:2021 - Software and Data Integrity Failures"], "references": ["https://www.php.net/manual/ru/function.unserialize.php", "https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization.html"], "shortlink": "https://sg.run/b24E", "source": "https://semgrep.dev/r/php.lang.security.unserialize-use.unserialize-use", "subcategory": ["audit"], "technology": ["php"]}, "metavars": {}, "severity": "WARNING"}, "path": "includes/simba-tfa/simba-tfa.php", "start": {"col": 20, "line": 521, "offset": 13644}}, {"check_id": "php.lang.security.audit.openssl-decrypt-validate.openssl-decrypt-validate", "end": {"col": 83, "line": 899, "offset": 31248}, "extra": {"fingerprint": "be574d3cb4b96926ff9b4993e0bfff6e14ddcf7e5c8a201f567a3b00646bd150543fd7317c0ff6e4494c67d6b1c48a0d1ab6386452539833981098141943e530_0", "is_ignored": false, "lines": "\t\t\t$decrypted = openssl_decrypt($enc, 'AES-128-CBC', $key, OPENSSL_RAW_DATA, $iv);", "message": "The function `openssl_decrypt` returns either a string of the decrypted data on success or `false` on failure. If the failure case is not handled, this could lead to undefined behavior in your application. Please handle the case where `openssl_decrypt` returns `false`.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-252: Unchecked Return Value"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/function.openssl-decrypt.php"], "shortlink": "https://sg.run/kzn7", "source": "https://semgrep.dev/r/php.lang.security.audit.openssl-decrypt-validate.openssl-decrypt-validate", "subcategory": ["audit"], "technology": ["php", "openssl"]}, "metavars": {}, "severity": "WARNING"}, "path": "includes/simba-tfa/providers/totp/loader.php", "start": {"col": 4, "line": 899, "offset": 31169}}], "version": "1.0.0"}